#!/bin/bash

# pathr-setup
#
# This is just a little script to:
# - create home for pathr

set -ue

USERNAME="pathr"
USERHOME="/home/${USERNAME}"

SNAP_CHANNEL_VERSION="1.28"
_divider="--------------------------------------------------------------------------------"
_prompt=">>>"
_indent="   "

header() {
    cat 1>&2 <<EOF
                      _____      _   _          
                     |  __ \    | | | |         
                     | |__) |_ _| |_| |__  _ __ 
                     |  ___/ _' | __| '_ \| '__|
                     | |  | (_| | |_| | | | |   
                     |_|   \__,_|\__|_| |_|_|   
                            
                            
                    P A T H R
                    Installer


$_divider
Website: https://pathr.ai
$_divider

EOF
}

usage() {
    cat 1>&2 <<EOF
pathr-setup
The installer for Pathr (https://pathr.ai)

USAGE:
    pathr-setup [FLAGS] [OPTIONS]

FLAGS:
    -y                      Disable confirmation prompt.
    -h, --help              Prints help information
EOF
}

main() {

    header

    local prompt=yes
    # Parse command-line options
    while getopts "hyu:" opt; do
        case ${opt} in
            h)
                usage
                exit 0
                ;;
            y)
                prompt=no
                ;;
            u)
                USERNAME=$OPTARG
                ;;
            \? )
                echo "Invalid option: $OPTARG" 1>&2
                show_usage
                exit 1
                ;;
            :)
                echo "Invalid option: $OPTARG requires an argument" 1>&2
                show_usage
                exit 1
                ;;
        esac
    done


    if [ "$prompt" = "yes" ]; then
        echo "$_prompt Ready to proceed? (y/n)"
        echo ""

        while true; do
            read -rp "$_prompt " _choice </dev/tty
            case $_choice in
                n)
                    err "exiting"
                    ;;
                y)
                    break
                    ;;
                *)
                    echo "Please enter y or n."
                    ;;
            esac
        done

        echo ""
        echo "$_divider"
        echo ""
    fi

    verify

    setup
}

user_can_sudo() {
  # Check if sudo is installed
  need_cmd sudo

  # The following command has 3 parts:
  #
  # 1. Run `sudo` with `-v`. Does the following:
  #    • with privilege: asks for a password immediately.
  #    • without privilege: exits with error code 1 and prints the message:
  #      Sorry, user <username> may not run sudo on <hostname>
  #
  # 2. Pass `-n` to `sudo` to tell it to not ask for a password. If the
  #    password is not required, the command will finish with exit code 0.
  #    If one is required, sudo will exit with error code 1 and print the
  #    message:
  #    sudo: a password is required
  #
  # 3. Check for the words "may not run sudo" in the output to really tell
  #    whether the user has privileges or not. For that we have to make sure
  #    to run `sudo` in the default locale (with `LANG=`) so that the message
  #    stays consistent regardless of the user's locale.
  #
  ! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo"
}

verify() {
  if ! user_can_sudo; then
    err "need sudo"
  fi
}

setup() {
    say 'runnig setup'
    setup_microk8s
    setup_zsh
}

setup_zsh() {
    # install oh-my-zsh
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

    sudo sed -i 's/^plugins=(.*)/plugins=(git kubectl)/' ${USERHOME}/.zshrc 
}


install_krew() {
    (
    set -x; cd "$(mktemp -d)" &&
    OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
    ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
    KREW="krew-${OS}_${ARCH}" &&
    curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
    tar zxvf "${KREW}.tar.gz" &&
    ./"${KREW}" install krew
    )

    # Store the correct profile file (i.e. .profile for bash or .zshrc for ZSH).
    case $SHELL in
    */zsh)
        PROFILE=$HOME/.zshrc
        PREF_SHELL=zsh
        ;;
    */bash)
        PROFILE=$HOME/.bashrc
        PREF_SHELL=bash
        ;;
    */fish)
        PROFILE=$HOME/.config/fish/config.fish
        PREF_SHELL=fish
        ;;
    *)
        echo "$INSTALLER_NAME: could not detect shell, manually add ${BIN_DIR} to your PATH."
        exit 1
    esac

    # Only add installer if it isn't already in PATH.
    if [[ ":$PATH:" != *":${BIN_DIR}:"* ]]; then
        echo >> $PROFILE && echo "export PATH=\"${KREW_ROOT:-$HOME/.krew}/bin:$PATH\"" >> $PROFILE
    fi

}

install_krew_plugins() {
    # https://github.com/ahmetb/kubectx
    kubectl krew install ctx
    kubectl krew install ns
}

setup_microk8s() {
    # prepare for pathr user
    mkdir -p ~/.kube
    microk8s config > ~/.kube/config
}

say() {
    printf 'pathr-setup: %s\n' "$1"
}


err() {
    say "$1" >&2
    exit 1
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

main "$@" || exit 1